// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id          Int      @id @default(autoincrement())
    account     String   @unique
    password    String
    name        String
    email       String   @unique
    phone       String?  @unique
    gender      String?
    lineId      String?  @unique
    birth       DateTime?
    avatar      String?
    scope       String   @default("Customer")
    token       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    order       Order[]
    cart        Cart[]
}

model Supplier {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    email       String?  @unique
    phone       String?  @unique
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    merchandise Merchandise?
}

model Merchandise {
    id          Int       @id @default(autoincrement())
    title       String    @unique
    unit        String    @default("å€‹")
    price       Float     @default(0)
    on          Boolean   @default(true)
    avatar      String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    supplier    Supplier? @relation(fields: [supplierId], references: [id])
    supplierId  Int?
    inventory   Inventory[]
    adjustment  Adjustment[]
    purchase    Purchase[]
    sale        Sale[]
    orderDetail OrderDetail[]
    cart        Cart[]
}

model Inventory {
    id            Int         @id @default(autoincrement())
    cost          Float       @default(0)
    quantity      Int         @default(0)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
    merchandiseId Int
    adjustment    Adjustment? @relation(fields: [adjustmentId], references: [id])
    adjustmentId  Int?
    purchase      Purchase?   @relation(fields: [purchaseId], references: [id])
    purchaseId    Int?
    sale          Sale?       @relation(fields: [saleId], references: [id])
    saleId        Int?
    version       Int         @default(0)
}

model Adjustment {
    id            Int         @id @default(autoincrement())
    amount        Float
    unitCost      Float
    type          String      @default("amount")
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
    merchandiseId Int
    inventory     Inventory?
}

model Purchase {
    id            Int         @id @default(autoincrement())
    amount        Float
    unitCost      Float
    type          String      @default("purchase")
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
    merchandiseId Int
    inventory     Inventory?
}

model Sale {
    id            Int         @id @default(autoincrement())
    amount        Float
    unitCost      Float
    unitPrice     Float
    type          String      @default("sale")
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
    merchandiseId Int
    inventory     Inventory?
}

model Order {
    id          Int      @id @default(autoincrement())
    status      String   @default("created")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id])
    userId      Int
    orderDetail OrderDetail[]
}

model OrderDetail {
    id            Int         @id @default(autoincrement())
    price         Float
    amount        Float
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    order         Order       @relation(fields: [orderId], references: [id])
    orderId       Int
    merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
    merchandiseId Int
}

model Cart {
    amount        Int
    user          User        @relation(fields: [userId], references: [id])
    userId        Int
    merchandise   Merchandise @relation(fields: [merchandiseId], references: [id])
    merchandiseId Int
    @@id([userId, merchandiseId])
}